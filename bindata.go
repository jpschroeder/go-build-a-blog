// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates\deletepage.html
// templates\editblog.html
// templates\editpage.html
// templates\head.html
// templates\unlock.html
// templates\viewblog.html
// templates\viewpage.html

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTemplatesdeletepagehtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x4d\x6e\xc3\x20\x10\x85\xd7\xb5\xe4\x3b\x4c\xe7\x00\xe6\x02\xe0" +
	"\xaa\x55\xf7\x8d\x94\x5e\x80\x84\x09\x20\x81\xb1\xec\xc1\x91\xe5\xfa\xee\x15\xb6\xdb\xae\xba\xc8\x86\x1f\xe9\x7d" +
	"\xf0\xe9\x8d\x7c\x36\xe9\xca\x73\x4f\xe0\x38\x86\xb6\xae\x64\xd9\x21\xe8\xce\x2a\xa4\x0e\xdb\xba\x5a\x16\x60\x8a" +
	"\x7d\xd0\x4c\x80\x8e\xb4\x69\x4a\x04\xa1\x59\xd7\xba\x92\x97\x64\xe6\xb6\xae\xea\x4a\x1a\x3f\xc1\x35\xe8\x71\x54" +
	"\x38\x78\xeb\xb8\xb0\x00\x00\x52\x83\x1b\xe8\xa6\x50\x2c\x4b\xf3\x16\x92\x3d\x87\x6c\xd7\x15\x5b\x97\x22\x49\xa1" +
	"\x8f\xd8\xd7\x7f\xc1\x72\x3b\x69\x4b\x3f\xd8\xe4\xe9\xfe\x30\x26\xc8\x78\xc6\xb6\xac\x3b\x2b\x85\xf1\xd3\x2e\x7e" +
	"\x4b\x43\x84\x48\xec\x92\x51\x78\xfa\x38\x7f\xfe\x9a\x97\xc8\xeb\x40\x30\xa7\x0c\x63\x3e\x0e\x77\xdd\x31\x70\x02" +
	"\x43\x81\x98\x80\x9d\x1f\xa1\xd7\x96\x5e\xfe\x9e\x7c\x92\xbe\xeb\x33\x43\x29\x56\xe1\x98\x2f\xd1\x33\xc2\xa4\x43" +
	"\x26\x85\xef\x1b\x87\x20\x36\x8b\xf2\xf9\xae\x21\x8e\x2a\xa5\xd8\x46\xf1\x1d\x00\x00\xff\xff\x7e\x5a\xd6\xf3\x9a" +
	"\x01\x00\x00")

func bindataTemplatesdeletepagehtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesdeletepagehtml,
		"templates/deletepage.html",
	)
}



func bindataTemplatesdeletepagehtml() (*asset, error) {
	bytes, err := bindataTemplatesdeletepagehtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/deletepage.html",
		size: 410,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547335292, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplateseditbloghtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\xc1\x6a\xf3\x30\x10\x84\xcf\xbf\xc1\xef\xb0\xff\x42\xaf\x16\xb9" +
	"\x4b\x3e\xe4\x05\x5a\x48\x5e\x60\x13\x6d\x2c\x81\x64\x19\x79\x6d\x1a\x84\xde\xbd\xc8\x69\x7a\x12\x8c\x76\x66\x3e" +
	"\x46\xff\xb7\xe9\x2e\xcf\x85\xc1\x49\x0c\x63\xdf\xe9\xf6\x42\xa0\x79\x32\xc8\x33\x8e\x7d\x57\x0a\x08\xc7\x25\x90" +
	"\x30\xa0\x63\xb2\x43\x3b\x41\x18\x6a\xed\x3b\x7d\x4b\xf6\x39\xf6\x5d\xdf\x69\xeb\x77\xb8\x07\x5a\x57\x83\xd9\x4f" +
	"\x4e\x9a\x17\x00\x40\x13\xb8\xcc\x0f\x83\xaa\x94\xe1\x1c\xd2\x74\x09\xdb\x54\x2b\x8e\x2e\x45\xd6\x8a\x5a\xa9\xb2" +
	"\x7e\x7f\xa5\x3c\x52\x8e\x10\x59\x5c\xb2\x06\xbf\x3e\x2f\xd7\xbf\x18\x77\x1a\x4b\x19\xae\x5e\x02\xd7\xaa\x95\x3b" +
	"\xbd\x3f\x84\xbf\x85\x32\x13\xcc\x14\xd9\x60\x23\x42\x58\x02\xdd\xd9\xa5\x60\x39\x1b\x3c\x37\x69\x2c\x65\xc9\x7e" +
	"\x96\x07\xe0\xc7\x8a\x30\x34\xb1\x05\xbd\xed\x47\xff\x3f\xed\xe7\x65\x13\x68\x93\x18\x5c\xb7\x5b\xf4\x82\xb0\x53" +
	"\xd8\xd8\xe0\x85\x76\x46\x50\x07\x70\xe3\x7c\x11\xab\xdf\x09\xb4\x3a\x26\xfc\x09\x00\x00\xff\xff\x89\xa6\x04\x07" +
	"\x52\x01\x00\x00")

func bindataTemplateseditbloghtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplateseditbloghtml,
		"templates/editblog.html",
	)
}



func bindataTemplateseditbloghtml() (*asset, error) {
	bytes, err := bindataTemplateseditbloghtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/editblog.html",
		size: 338,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547305364, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplateseditpagehtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xc1\x8e\xdb\x20\x10\x3d\xd7\x92\xff\x61\x3a\x52\x8f\x35\xea\x1d" +
	"\xfb\xb0\x6a\x7b\xaa\xd4\x95\x92\x1f\x20\x66\x62\x50\xc1\x58\x98\x38\xbb\xa2\xfc\x7b\x45\x8c\x13\x6f\xa5\x95\xd6" +
	"\x17\xec\xe1\xcd\x7b\xcc\xe3\x99\x7f\x96\xae\x0f\xaf\x13\x81\x0a\xd6\x74\x75\xc5\xf3\x0a\x46\x8c\x43\x8b\x34\x62" +
	"\x57\x57\x31\x42\x20\x3b\x19\x11\x08\x50\x91\x90\x4d\x86\x20\x34\x29\xd5\x15\x3f\x39\xf9\xda\xd5\x55\x5d\x71\xa9" +
	"\x17\xe8\x8d\x98\xe7\x16\xbd\x1e\x54\xc8\xbd\x00\x00\x5c\x80\xf2\x74\x6e\x91\xc5\xd8\x3c\x19\x37\x1c\xcc\x65\x48" +
	"\x09\x3b\xe5\x2c\x71\x26\x0a\x2c\x46\x7d\x86\xe6\x59\x0c\xb4\xee\xaf\xd5\xbf\xef\xb5\xe7\xaf\x07\x18\xbb\x45\xd3" +
	"\xf5\x41\xf6\xc1\x36\x26\xc9\x50\x20\xec\xd6\x75\x7f\x18\x1a\xe5\x6d\x3e\x26\xf5\xb2\xce\x77\x76\xde\x82\xa5\xa0" +
	"\x9c\x6c\xf1\xf9\xf7\xe1\x78\x1f\x50\x8f\xd3\x25\x40\x76\xb1\xc5\x40\x2f\x01\x61\x14\x36\xbf\xeb\x60\x08\x61\x11" +
	"\xe6\x42\x2d\xc6\xd8\x1c\x73\x21\x25\x84\xc9\x88\x9e\x94\x33\x92\x7c\x8b\xc7\x15\xc6\x36\xba\x55\x11\xca\xf3\x86" +
	"\x5d\x8a\x40\x41\x5b\xfa\x6a\x5c\x2f\xcc\xa6\x93\xab\x7b\x99\x9f\xce\x5b\x11\x02\xc9\xef\x22\xd0\x51\xdb\x9b\x24" +
	"\x7b\x8f\xb3\x57\xd4\xff\x39\xb9\x97\x8d\x6d\x56\xee\x8a\xe5\x3a\x0e\xca\x5d\x53\xba\x21\x48\x16\x28\x49\x2c\xf6" +
	"\x6c\x92\xdf\x32\x3b\x64\x2c\xe8\x11\x7e\xe9\x39\xe8\x71\x28\xc3\xb0\xc7\x34\x3c\x7b\x23\x3c\x89\x22\x94\xa3\xf3" +
	"\x9f\x15\x4f\xb9\xd4\xc5\x38\x79\x3d\x86\x33\xe0\x97\x19\xa1\xc9\xc5\x94\x38\xdb\xda\x0b\xdd\x3e\x36\x3f\xbc\x77" +
	"\x7e\xcb\xcc\x3e\x89\x94\x37\x32\xe3\x06\xd9\x1f\xe8\x7e\xcb\x75\xf5\xe9\x8d\x25\xf3\xe5\x64\x75\xb8\x5b\x7a\x10" +
	"\x4b\xb9\x1f\xce\x72\x0a\xd6\x3c\xb0\x12\x7d\xce\x6e\xbf\xce\xbf\x00\x00\x00\xff\xff\x3b\x40\x35\xef\x4a\x03\x00" +
	"\x00")

func bindataTemplateseditpagehtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplateseditpagehtml,
		"templates/editpage.html",
	)
}



func bindataTemplateseditpagehtml() (*asset, error) {
	bytes, err := bindataTemplateseditpagehtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/editpage.html",
		size: 842,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547332071, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesheadhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\xcd\x8e\xda\x40\x0c\xc7\xef\x2b\xed\x3b\xb8\x54\x7b\x63\xc2\x87" +
	"\xba\x55\x49\xc9\x9e\x7a\xea\xa9\x52\x7b\xab\xf6\x60\x32\x0e\x19\x75\x32\x8e\x66\x1c\x02\xad\xfa\xee\x55\x20\xc0" +
	"\x84\xd0\xc3\xc2\x25\xb1\xfd\xb3\x3d\xf6\x7f\xb2\x2e\x09\xf5\xcb\xe3\x03\x00\xc0\xba\x22\x41\xc8\x4b\xf4\x81\x24" +
	"\x9b\x34\x52\xa8\x4f\x93\x81\xcf\x61\x45\xd9\x64\x67\xa8\xad\xd9\xcb\x04\x72\x76\x42\x4e\xb2\x49\x6b\xb4\x94\x99" +
	"\xa6\x9d\xc9\x49\x1d\x5f\xa6\x60\x9c\x11\x83\x56\x85\x1c\x2d\x65\x8b\x64\x7e\x2f\xd7\x17\x0a\xb9\x37\xb5\x18\x76" +
	"\x51\xba\x1f\x4d\xb5\xb1\xd4\x12\xe9\x7b\x0c\x36\x52\xb2\x8f\xc2\xbf\x72\xe9\xe0\x5b\x02\xdf\xf3\xd2\x33\x69\xf2" +
	"\x67\xaa\x67\xc5\x88\xa5\x97\x6b\xd2\xf5\xec\x64\xe9\xdd\x41\x0e\x97\x97\x0d\xeb\x03\xfc\x39\x3d\x77\xbf\x82\x9d" +
	"\xa8\x02\x2b\x63\x0f\x29\x04\x74\x41\x05\xf2\xa6\xf8\x7c\x8d\xb0\xc6\x91\x2a\xc9\x6c\x4b\x49\x61\x91\x3c\x53\x15" +
	"\x39\x2b\xdc\x9f\xc6\x91\xc2\x87\xe5\x8d\xc7\x6f\x8d\x4b\x01\x1b\xe1\xc8\x5c\xa3\xd6\xc6\x6d\x53\x58\x5c\xa2\xff" +
	"\x3e\x3e\x9c\x1e\xca\xc5\x14\xca\xe5\xa8\xbb\xb6\xaf\xed\xd8\x57\x68\x47\xd0\x72\x0a\x05\xfb\x2a\xc6\xfa\x22\x4a" +
	"\xb8\x4e\x61\x1e\xb5\x7c\xa1\x30\x0e\x17\xda\x8b\xd2\x94\xb3\xc7\x6e\x4f\x5d\x25\x47\x57\xe2\x3c\xe6\x9c\x35\x4d" +
	"\xa1\xf6\x14\xb3\x1b\xcc\x7f\x6d\x3d\x37\x4e\xa7\xf0\xbe\x78\xee\xfe\xf0\xce\x54\x9d\x7c\xd0\xc9\x6d\xd9\x1b\x98" +
	"\x77\xe4\x0b\xcb\xad\xda\x0f\xe6\x74\x09\xef\x1a\x43\x4f\xd8\x69\xad\x6e\xe4\xa7\x1c\x6a\xca\x3a\xe3\xeb\xc0\xa2" +
	"\x51\x48\x4c\x45\xca\x72\x8e\x76\xe8\xab\x31\x84\x96\xbd\x7e\x1d\x8d\x35\x98\xdf\x14\xaf\x61\xb0\x9d\x6e\x66\xb0" +
	"\x78\x1a\xed\x53\x6d\x58\x84\xab\xa1\x10\xde\xda\xef\xdd\x9e\x7a\x15\xad\x56\x4f\xff\xcb\x1a\x47\x9f\xf5\xf8\x71" +
	"\x3e\xaf\xf7\xb7\x40\x12\x9a\xcd\xf1\x02\xc4\x44\xdf\xff\x51\x12\x6a\x78\xea\x68\x1c\xf3\x64\x35\x3e\x56\xe2\xbb" +
	"\x62\x23\xc5\xa0\x35\x5b\x97\xc2\xd1\x39\x42\xc8\x7b\xf6\x31\x92\xb3\x65\x9f\x82\x27\x1d\x2b\x0b\x60\x3d\x3b\x5f" +
	"\xcf\xf5\xec\xf8\xad\xfa\x17\x00\x00\xff\xff\x50\x7e\xa7\x4e\xb2\x04\x00\x00")

func bindataTemplatesheadhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesheadhtml,
		"templates/head.html",
	)
}



func bindataTemplatesheadhtml() (*asset, error) {
	bytes, err := bindataTemplatesheadhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/head.html",
		size: 1202,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547698294, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesunlockhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x4b\x4e\xc3\x30\x10\x86\xd7\x44\xca\x1d\x86\xd9\x13\x5f\xc0\xce" +
	"\x02\x89\x15\x0b\x90\x0a\x07\x98\xc6\xd3\xd8\xaa\x5f\x72\x9c\xa2\xca\xca\xdd\x91\x1b\x8a\x60\x65\xc9\x33\xff\xe3" +
	"\x1b\xf9\xa8\xe3\x54\xae\x89\xc1\x14\xef\xc6\xbe\x93\xed\x05\x47\x61\x56\xc8\x01\xc7\xbe\xab\x15\x0a\xfb\xe4\xa8" +
	"\x30\xa0\x61\xd2\x43\x5b\x41\x18\xb6\xad\xef\xe4\x31\xea\xeb\xd8\x77\x7d\x27\xb5\xbd\xc0\xe4\x68\x59\x14\x66\x3b" +
	"\x9b\xd2\xb4\x00\x00\x92\xc0\x64\x3e\x29\x14\xb5\x0e\xcf\x2e\xce\x07\xb7\xce\xdb\x86\xa3\x89\x9e\xa5\xa0\x16\x2a" +
	"\xb4\xbd\xec\x2e\xa7\x98\x3d\x78\x2e\x26\x6a\x85\xef\x6f\x87\x8f\x5f\x1b\x1b\xd2\x5a\xa0\x75\x55\x98\x68\x59\xbe" +
	"\x62\xd6\x08\x81\x3c\x2b\x3c\xf3\x15\x21\x39\x9a\xd8\x44\xa7\x39\x2b\x7c\x6d\x3f\x9a\x0a\x3d\xb9\x64\xe7\x10\x33" +
	"\x2b\x2c\x79\x65\x04\x71\x0b\x6a\x96\xb5\xda\x13\x0c\x2f\x39\xc7\xdc\x58\x6e\x29\x7f\x28\xb8\x0d\x70\xac\xf5\xbe" +
	"\x72\xaf\xb9\x6b\x39\xe8\xa6\xea\xbb\x87\x7f\xd5\x96\xf5\xe8\x6d\x41\xb8\x90\x5b\x59\xe1\x67\x70\x71\x3a\xef\xa9" +
	"\x52\x34\xba\x9d\x53\xfc\x1c\x4e\x8a\xdb\xe1\xbf\x03\x00\x00\xff\xff\x88\x3c\xd2\x35\x88\x01\x00\x00")

func bindataTemplatesunlockhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesunlockhtml,
		"templates/unlock.html",
	)
}



func bindataTemplatesunlockhtml() (*asset, error) {
	bytes, err := bindataTemplatesunlockhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/unlock.html",
		size: 392,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547521771, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesviewbloghtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcf\x6a\xe4\x30\x0c\xc6\xef\x81\xbc\x83\xd6\xcc\x71\x49\x98\x39" +
	"\x2e\x8e\x0f\xcb\xb2\xf4\x58\x68\xfb\x00\x9e\x91\xc6\x0e\x75\x9c\x90\x78\x4a\x07\x35\xef\x5e\x14\xcf\xbf\x52\x28" +
	"\x73\x51\x40\xd2\xef\xfb\xe4\x48\xfa\x17\xf6\xbb\x74\x1c\x08\x7c\xea\x82\x29\x0b\x2d\x5f\x08\x36\xba\x46\x51\x54" +
	"\xa6\x2c\x98\x21\x51\x37\x04\x9b\x08\x94\x27\x8b\x95\xb4\x28\xa8\xe6\xb9\x2c\xf4\xb6\xc7\xa3\x29\x0b\x01\xd7\x86" +
	"\xb9\xfa\x1b\x7a\x57\x3d\xb7\x29\xd0\x3c\xeb\xda\xaf\x73\x0d\xdb\xb7\x4b\xf1\x21\x75\x41\x6a\x92\xcb\xe0\x78\x69" +
	"\x82\x5d\xb0\xd3\xd4\xa8\xb1\x75\x3e\x89\x39\x00\x00\x73\xbb\x87\xea\x25\x86\x7e\xf7\x4a\x28\xae\x92\xd5\x16\xfc" +
	"\x48\xfb\x46\xd5\x67\x61\x09\x4f\xe1\xe0\xe6\xb9\xb6\x88\xca\x58\x44\x5d\xdb\x93\xc8\xc7\xcf\x00\x61\x9b\x94\x91" +
	"\x78\x37\x22\xe3\x28\x23\xf1\x8a\x30\x53\x98\xe8\xae\x11\x0f\x31\x0b\xe4\xef\x17\x89\xb8\x3c\xf2\xfa\x87\x98\x61" +
	"\xb4\xd1\x11\xac\xda\x88\xf4\xfe\x1b\x56\x83\x75\x04\x7f\x1a\xa8\x1e\xad\xa3\x09\x2e\x86\x7e\x63\x6e\x4d\x57\xdf" +
	"\x5c\x99\x17\x76\xe1\x72\x4a\x19\xe6\x2c\x98\xd7\x06\xb2\x1b\x6b\x74\xed\x37\xa7\x89\xf4\x70\x5e\xcb\x74\xd8\x26" +
	"\xe9\xb9\x61\xfe\xf7\x63\x67\x53\x22\xfc\x27\xf7\x21\xec\x90\x6f\x86\x22\x2e\x73\xc9\x43\x4e\x47\xa2\xeb\xe5\xc8" +
	"\x3e\x03\x00\x00\xff\xff\xcd\x30\x7e\xef\x74\x02\x00\x00")

func bindataTemplatesviewbloghtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesviewbloghtml,
		"templates/viewblog.html",
	)
}



func bindataTemplatesviewbloghtml() (*asset, error) {
	bytes, err := bindataTemplatesviewbloghtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/viewblog.html",
		size: 628,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547393392, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesviewpagehtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x4d\x4e\x03\x31\x0c\x85\xf7\x23\xcd\x1d\x4c\x0e\x30\x51\xf7\x69" +
	"\x16\x08\x21\x96\x48\xc0\x01\xcc\xc4\x4d\x22\xf2\x33\x9a\x31\x95\xaa\x90\xbb\x23\x4f\x5b\x76\x6c\x12\xd9\xef\xf9" +
	"\x93\xfd\xcc\x83\xab\x33\x5f\x16\x82\xc0\x39\xd9\x71\x30\xf2\x43\xc2\xe2\x8f\x8a\x8a\xb2\xe3\xd0\x1a\x30\xe5\x25" +
	"\x21\x13\xa8\x40\xe8\x26\xb1\x28\x98\x7a\x1f\x07\xf3\x59\xdd\xc5\x8e\xc3\x38\x18\x17\xcf\x30\x27\xdc\xb6\xa3\x5a" +
	"\xa3\x0f\x2c\xb3\x00\x00\x06\x21\xac\x74\x3a\x2a\xdd\xda\xf4\x98\xaa\x7f\x4b\xdf\xbe\x77\x65\x43\xcd\x64\x34\x5a" +
	"\xb8\xfa\x5a\x8b\x27\x98\x3e\x4a\xaa\xf3\x17\x39\x81\x4b\xf7\xe7\xbf\x79\xa9\x5e\xd1\xd3\xad\x22\x17\x59\x59\x79" +
	"\x05\x79\x27\x52\xd9\x41\x46\xbb\x78\xbe\x6e\x19\x0e\xb6\xb5\xe9\x3d\x72\xa2\xde\x8d\x0e\x07\xb9\x79\x5b\xb0\x48" +
	"\xfb\xb9\xae\x19\x99\xc9\x3d\x21\xef\xf2\x2e\xdc\xaf\x13\xc7\x0b\xe7\x24\xc2\x1f\x4f\xdf\x02\x30\x7a\x0f\xf0\x37" +
	"\x00\x00\xff\xff\x5d\xe7\xc4\x39\x50\x01\x00\x00")

func bindataTemplatesviewpagehtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesviewpagehtml,
		"templates/viewpage.html",
	)
}



func bindataTemplatesviewpagehtml() (*asset, error) {
	bytes, err := bindataTemplatesviewpagehtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/viewpage.html",
		size: 336,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547392709, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"templates/deletepage.html": bindataTemplatesdeletepagehtml,
	"templates/editblog.html":   bindataTemplateseditbloghtml,
	"templates/editpage.html":   bindataTemplateseditpagehtml,
	"templates/head.html":       bindataTemplatesheadhtml,
	"templates/unlock.html":     bindataTemplatesunlockhtml,
	"templates/viewblog.html":   bindataTemplatesviewbloghtml,
	"templates/viewpage.html":   bindataTemplatesviewpagehtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"templates": {Func: nil, Children: map[string]*bintree{
		"deletepage.html": {Func: bindataTemplatesdeletepagehtml, Children: map[string]*bintree{}},
		"editblog.html": {Func: bindataTemplateseditbloghtml, Children: map[string]*bintree{}},
		"editpage.html": {Func: bindataTemplateseditpagehtml, Children: map[string]*bintree{}},
		"head.html": {Func: bindataTemplatesheadhtml, Children: map[string]*bintree{}},
		"unlock.html": {Func: bindataTemplatesunlockhtml, Children: map[string]*bintree{}},
		"viewblog.html": {Func: bindataTemplatesviewbloghtml, Children: map[string]*bintree{}},
		"viewpage.html": {Func: bindataTemplatesviewpagehtml, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
