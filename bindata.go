// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates\deletepage.html
// templates\editblog.html
// templates\editpage.html
// templates\head.html
// templates\unlock.html
// templates\viewblog.html
// templates\viewpage.html
// static\test.txt

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTemplatesdeletepagehtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x4b\x6e\xc3\x20\x10\x86\xd7\xb5\xe4\x3b\x4c\xe7\x00\xe1\x02\xe0" +
	"\xaa\x55\xf7\x8d\x94\x5e\x80\x84\x09\x20\x81\xb1\xcc\xe0\xc8\x72\x73\xf7\x0a\xdb\x7d\x6c\xba\xe8\x86\x87\xf4\x7f" +
	"\xc3\xa7\x1f\xf9\x68\xd2\x85\xe7\x81\xc0\x71\x0c\x5d\xdb\xc8\xba\x43\xd0\xbd\x55\x48\x3d\x76\x6d\xb3\x2c\xc0\x14" +
	"\x87\xa0\x99\x00\x1d\x69\x73\xa8\x11\x84\xc3\x4b\x48\xf6\x14\x8a\xbd\xdf\xdb\x46\x9e\x93\x99\xbb\xb6\x69\x1b\x69" +
	"\xfc\x04\x97\xa0\x73\x56\x38\x7a\xeb\xb8\xce\x00\x00\x90\x1a\xdc\x48\x57\x85\x62\x59\x7e\xb1\xd8\xb9\x14\x49\x0a" +
	"\xbd\xc7\x3e\xfe\x0a\xd6\xdb\x51\x5b\xfa\xc2\x26\x4f\xb7\x7f\x63\x82\x8c\x67\xec\xea\xba\xb1\x52\x18\x3f\x6d\xe2" +
	"\xd7\x34\x46\x88\xc4\x2e\x19\x85\xc7\xb7\xd3\xfb\xb7\x79\x8d\x3c\x8f\x04\x73\x2a\x90\xcb\x7e\xb8\xe9\x9e\x81\x13" +
	"\x18\x0a\xc4\x04\xec\x7c\x86\x41\x5b\x7a\xfa\x19\xf9\x20\x7d\x3f\x14\x86\x5a\xb0\xc2\x5c\xce\xd1\x33\xc2\xa4\x43" +
	"\x21\x85\xaf\x2b\x87\x20\x56\x8b\xfa\xf8\xa6\x21\xf6\x2a\xa5\x58\xbf\xe4\x33\x00\x00\xff\xff\x9b\xf1\x04\x47\xa2" +
	"\x01\x00\x00")

func bindataTemplatesdeletepagehtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesdeletepagehtml,
		"templates/deletepage.html",
	)
}



func bindataTemplatesdeletepagehtml() (*asset, error) {
	bytes, err := bindataTemplatesdeletepagehtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/deletepage.html",
		size: 418,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547789008, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplateseditbloghtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\xc1\x8a\xf3\x20\x14\x85\xd7\x7f\x20\xef\x70\xff\x0b\xb3\x8d\x74" +
	"\xaf\x2e\xfa\x02\x33\xd0\xbe\xc0\x6d\xbd\x8d\x82\xc6\x60\x6e\xc2\x14\xc9\xbb\x0f\xb6\x93\x59\x09\x47\xfd\xce\xc7" +
	"\xd1\xff\x5d\xbe\xcb\x73\x66\xf0\x92\xa2\xed\x3b\xdd\x4e\x88\x34\x8d\x06\x79\x42\xdb\x77\xb5\x82\x70\x9a\x23\x09" +
	"\x03\x7a\x26\x37\xb4\x27\x08\xc3\x35\x48\xe4\x7d\xef\x3b\x7d\xcb\xee\x69\xfb\xae\xef\xb4\x0b\x1b\xdc\x23\x2d\x8b" +
	"\xc1\x12\x46\x2f\x0d\x00\x00\xa0\x09\x7c\xe1\x87\x41\x55\xeb\x70\x8e\x79\xbc\xc4\x75\xdc\x77\xb4\x3e\x27\xd6\x8a" +
	"\x5a\xb3\x72\x61\x7b\x53\x1e\xb9\x24\x48\x2c\x3e\x3b\x83\x5f\x9f\x97\xeb\x1f\xc6\x9f\x6c\xad\x47\xb3\x56\xfe\x74" +
	"\x5c\x08\x7f\x0b\x15\x26\x98\x28\xb1\xc1\x66\x84\x30\x47\xba\xb3\xcf\xd1\x71\x31\x78\x6e\x91\xad\x75\x2e\x61\x92" +
	"\x07\xe0\xc7\x82\x30\xb4\xb0\x81\x8e\xef\xaf\xfe\x7f\x3a\x4c\xf3\x2a\xd0\x76\x31\xb8\xac\xb7\x14\x04\x61\xa3\xb8" +
	"\xb2\xc1\x0b\x6d\x8c\xa0\x5e\xc2\xcd\xf3\x6d\xac\x7e\x27\xd0\xea\xb5\xe3\x4f\x00\x00\x00\xff\xff\xd0\x80\xe1\x74" +
	"\x57\x01\x00\x00")

func bindataTemplateseditbloghtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplateseditbloghtml,
		"templates/editblog.html",
	)
}



func bindataTemplateseditbloghtml() (*asset, error) {
	bytes, err := bindataTemplateseditbloghtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/editblog.html",
		size: 343,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547789019, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplateseditpagehtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xdb\x6a\xe3\x3a\x14\x7d\x3e\x81\xfc\x83\x8e\xe0\x40\x0e\x4c\x2d" +
	"\x3a\xcc\xc3\x30\x63\x1b\xa6\xcc\xed\xa1\xa5\x85\xe4\x07\x76\xac\x1d\x5b\xa9\x2e\x46\xda\x76\x5a\x3c\xfe\xf7\x41" +
	"\xb1\x9d\xb8\xed\x04\xc6\x2f\xd6\x65\xed\xb5\xb4\x97\x16\x4a\xff\x95\xae\xa0\xe7\x1a\x59\x45\x46\xe7\xcb\x45\x1a" +
	"\xff\x4c\x83\x2d\x33\x8e\x96\xe7\xcb\x45\xd7\x31\x42\x53\x6b\x20\x64\xbc\x42\x90\x49\x84\x70\x96\x6c\x14\x69\xec" +
	"\xfb\xe5\x22\xdd\x3a\xf9\x9c\x2f\x17\xcb\x45\x2a\x55\xcb\x0a\x0d\x21\x64\xdc\xab\xb2\xa2\x48\xc0\x18\x63\x29\xb0" +
	"\xca\xe3\x2e\xe3\xa2\xeb\x92\x1b\xed\xca\xb5\x6e\xca\xbe\xe7\x79\xe5\x0c\xa6\x02\x46\x58\xd7\xa9\x1d\x4b\x1e\xa0" +
	"\xc4\x61\x7f\x58\xfd\x75\xa9\x3c\xce\xce\x60\x9e\xb7\x0a\x0f\x67\xb2\xbf\x2c\x13\x12\x35\x12\xf2\x7c\xf8\xcf\x0f" +
	"\x83\x56\x1e\xfb\x13\x52\xb5\x43\x7f\x3b\xe7\x0d\x33\x48\x95\x93\x19\x7f\xb8\x5f\x6f\x4e\x0d\x2a\x5b\x37\xc4\xa2" +
	"\x95\x19\x27\x7c\x22\xce\x2c\x98\x38\x8e\x2e\x71\xd6\x82\x6e\x30\xe3\x5d\x37\xd9\xc6\x59\xad\xa1\xc0\xca\x69\x89" +
	"\x3e\xe3\x9b\x01\x26\x26\xba\x41\x91\x8d\xdf\x0b\x76\x09\x84\xa4\x0c\x5e\x69\x57\x80\x9e\x74\xe2\xea\x5c\xe6\xbb" +
	"\xf3\x06\x88\x50\x7e\x05\xc2\x8d\x32\x47\x49\x71\x89\xb3\xa8\xb0\x78\xdc\xba\xa7\x89\x2d\x54\xee\xc0\xc7\xeb\x58" +
	"\x57\xee\xd0\xf7\x47\x04\xca\x11\x8a\x92\x8f\xf6\x4c\x92\xd7\x91\x9d\x45\x2c\x53\x96\xdd\xaa\x40\xca\x96\x63\x33" +
	"\xe2\xdc\x4d\x1a\xbd\x01\x8f\x30\x0a\xc5\xe8\xbc\xb2\xe2\xe6\xb8\xa4\xe4\xb8\x99\x77\x5d\xed\x95\xa5\x1d\xe3\xff" +
	"\x05\xce\x92\xb8\xdd\xf7\xa9\x98\x88\x66\x8e\x1d\x8b\x50\x2a\x72\xfe\x62\xd9\xf9\x28\xf3\xc8\x7d\xf3\xde\xf9\x29" +
	"\x6f\xf3\x14\x63\xdc\x88\x64\x13\x64\xce\x70\x4a\xc8\x72\xf1\xcf\x0b\x3b\x43\xb3\x35\x8a\x4e\xd7\xb1\x86\x76\xbc" +
	"\xdb\x54\xc4\x04\x0d\x59\x0a\x85\x57\x35\xb1\xe0\x8b\x8c\x57\x44\x75\xf8\x24\x44\x21\xed\x3e\x24\x85\x76\x8d\xdc" +
	"\x69\xf0\x98\x14\xce\x08\xd8\xc3\x93\xd0\x6a\x1b\x04\x14\x28\xae\x93\x0f\xc9\xfb\x38\x4a\xf6\x81\xcf\x02\x27\xf6" +
	"\xd0\xc2\xc0\xc9\x59\x51\x81\x0f\x48\x19\x6f\x68\x77\xf5\x91\xe7\xa9\x18\x76\xf2\x93\xee\xd8\x42\x0b\x9e\x0d\x8e" +
	"\xb1\x8c\x45\xd2\x38\x59\x4d\x26\xfe\xff\x79\x40\x0d\xd3\x24\x20\x6d\x2a\x34\xb8\xe2\xf1\x20\x14\x87\xc2\x38\xeb" +
	"\x1e\x41\xbd\x85\x86\xa0\x9c\x8d\x25\x77\x4e\x8e\x15\xc6\x49\x14\x06\xfc\xa3\x74\x07\xfb\xba\xc2\xa3\x95\xe8\xf1" +
	"\xa8\x12\x63\xf4\xa3\x21\x42\xbf\xda\x81\x0e\xf8\xf6\x1c\xf7\x35\x29\x67\x57\xfc\xe0\xa1\xe6\xef\x18\xf9\xe6\x0f" +
	"\xa0\x9f\xaa\xac\x74\x7c\x86\xbe\x14\xa4\x5a\xbc\x55\x16\x2f\xf1\x45\xc5\x87\x98\x97\x3b\xf0\xa5\xb2\x67\xd8\xdc" +
	"\x39\x31\x3e\x74\xa9\x38\xbe\x96\xbf\x03\x00\x00\xff\xff\x19\x5e\x96\x0b\x3d\x05\x00\x00")

func bindataTemplateseditpagehtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplateseditpagehtml,
		"templates/editpage.html",
	)
}



func bindataTemplateseditpagehtml() (*asset, error) {
	bytes, err := bindataTemplateseditpagehtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/editpage.html",
		size: 1341,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547869631, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesheadhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x6d\x6b\xdb\x30\x10\xfe\x3e\xd8\x7f\xb8\xa5\x14\x36\x88\xdc\xb8" +
	"\xac\x65\x71\xe3\x7e\xda\xbf\x18\xfd\xa0\x58\x67\x5b\x4c\xd6\x19\xe9\xd2\x24\x0b\xf9\xef\x43\x8e\xe3\xca\x71\x4a" +
	"\xd9\x12\x30\x92\xee\x79\xee\xf5\x91\x56\x35\x4a\xf5\xfc\xf9\x13\x00\xc0\xaa\x41\x96\x50\xd4\xd2\x79\xe4\x7c\xb6" +
	"\xe1\x52\xfc\x98\x8d\x6c\x56\x36\x98\xcf\x5e\x35\x6e\x5b\x72\x3c\x83\x82\x2c\xa3\xe5\x7c\xb6\xd5\x8a\xeb\x5c\xe1" +
	"\xab\x2e\x50\x74\x9b\x39\x68\xab\x59\x4b\x23\x7c\x21\x0d\xe6\x69\xb2\xb8\xe6\xeb\x27\xfa\xc2\xe9\x96\x35\xd9\xc8" +
	"\xdd\xe1\x90\x1c\x8f\x01\xde\x13\x58\xb3\xc1\xe7\xee\x74\x75\x77\xda\xf4\x16\xcf\xfb\x61\xb3\x26\xb5\x87\xc3\x69" +
	"\x1d\x7e\x25\x59\x16\xa5\x6c\xb4\xd9\x67\xe0\xa5\xf5\xc2\xa3\xd3\xe5\xd3\x1b\xc2\x68\x8b\xa2\x46\x5d\xd5\x9c\x41" +
	"\x9a\x3c\x60\x13\x19\x1b\xb9\x3b\x95\x92\xc1\xf7\xfb\x0b\x8b\xab\xb4\xcd\x40\x6e\x98\xa2\xe3\x56\x2a\xa5\x6d\x95" +
	"\x41\x3a\xa0\x8f\xe7\x12\xea\x74\x0e\xf5\xfd\x24\xbb\x6d\x1f\xdb\x92\x6b\xa4\x99\x90\xee\xe7\x50\x92\x6b\x62\x5a" +
	"\x1f\x44\x30\xb5\x19\x2c\xa2\x94\x07\x96\x8c\xe1\x8c\x3b\x16\x0a\x0b\x72\x32\xf4\x38\x44\xb2\xf8\xc6\x00\x38\x2d" +
	"\x0b\x52\x18\xd3\xd6\xb2\xf8\x5d\x39\xda\x58\x95\xc1\x0d\x22\x5e\xc6\x68\x1d\x5e\x4b\xca\x60\x19\x1a\xf9\xd0\xee" +
	"\x9e\xde\xf1\x55\x3e\x84\x3f\x7c\xd1\x4d\x50\x90\xb4\xfc\x81\x67\x7a\x45\x57\x1a\xda\x8a\xdd\xa8\xdd\x03\x3c\xd4" +
	"\x27\x1d\xca\x20\xb7\x76\xc3\xbf\x78\xdf\x62\x1e\x0e\x5f\x46\x27\x4a\x32\xb2\x6e\x50\x18\x2a\xa4\x19\xdb\x5a\xe9" +
	"\xfd\x96\x9c\x7a\x99\x4c\xc7\xeb\x3f\x18\x4f\x73\x34\xe4\xd0\x7a\x48\x6f\x27\xb2\x10\x6b\x62\xa6\x66\xac\xa7\x7f" +
	"\xcd\xf7\x6a\x4e\xbd\x18\x97\xcb\xdb\xf7\xbc\xc6\xe8\xb3\xac\x1f\x17\x8b\x61\x1c\x03\xe1\x06\x95\x66\x72\x1f\xe1" +
	"\xaf\x46\xfd\xff\x2e\x74\x6a\x20\xa7\xd0\x89\x82\x0c\xb9\x0c\x5c\xb5\xfe\x9a\x3e\x2e\xe7\x70\xfe\x7c\x9b\x42\xfb" +
	"\x04\xd2\xb1\xa8\x4e\xb6\xee\xfa\x67\xe0\xc9\x68\x75\x59\x63\xe2\x37\xeb\xee\xad\x88\xab\xec\xb3\xeb\x6e\x8f\x18" +
	"\x4f\x36\x1a\xf9\x22\x59\x4e\x47\x97\xb8\xd0\xa0\xc9\xe5\x92\x46\x57\x36\x83\xce\x38\xa1\xa0\x73\xe3\x2e\x9f\xeb" +
	"\x46\x15\x5f\x42\x80\xd5\xdd\xf9\x25\x5b\xdd\x75\x4f\xf2\xdf\x00\x00\x00\xff\xff\x6a\x30\xea\x4b\x99\x05\x00\x00" +
	"")

func bindataTemplatesheadhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesheadhtml,
		"templates/head.html",
	)
}



func bindataTemplatesheadhtml() (*asset, error) {
	bytes, err := bindataTemplatesheadhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/head.html",
		size: 1433,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547869295, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesunlockhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\x4b\x6e\xf3\x20\x10\xc7\xd7\x9f\x25\xee\x30\xdf\xec\x1b\x2e\x00" +
	"\x5e\x54\xea\xaa\x8b\x56\x4a\x7b\x80\x89\x99\x18\x14\x5e\xc2\x38\x55\x84\x72\xf7\x8a\xb8\xa9\xd2\x15\x12\xcc\xff" +
	"\xf1\x63\xd4\x7f\x93\xa6\x7a\xc9\x0c\xb6\x06\x3f\x8a\x41\xf5\x13\x3c\xc5\x59\x23\x47\x1c\xc5\xd0\x1a\x54\x0e\xd9" +
	"\x53\x65\x40\xcb\x64\x76\x7d\x04\x61\xf7\xec\xd3\xbc\xf7\xeb\x7c\xbd\x8a\x41\x1d\x92\xb9\x8c\x62\x10\x83\x32\xee" +
	"\x0c\x93\xa7\x65\xd1\x58\xdc\x6c\x6b\xf7\x00\x00\x50\x04\xb6\xf0\x51\xa3\x6c\xed\x41\x8b\xa3\x4d\x81\x95\xa4\x1e" +
	"\x2e\x8d\x3b\x6f\x2e\xc7\x54\x02\x04\xae\x36\x19\x8d\xef\x6f\xfb\x8f\x5f\x1b\x17\xf3\x5a\xa1\x77\xd6\x98\x69\x59" +
	"\xbe\x52\x31\x08\x91\x02\x6b\x3c\xf1\x05\x21\x7b\x9a\xd8\x26\x6f\xb8\x68\x7c\xed\x37\x86\x2a\x3d\xf9\xec\xe6\x98" +
	"\x0a\x6b\xac\x65\x65\x04\x79\x0b\xea\x96\xad\xb9\x23\xec\x5e\x4a\x49\xa5\xb3\xdc\x52\x1e\x28\xb8\x3f\xe0\xd8\xda" +
	"\x7d\xe4\x5e\x73\xd3\x72\x34\x5d\x25\x86\x7f\x7f\xaa\x2d\xeb\x21\xb8\x8a\x70\x26\xbf\xb2\xc6\xcf\xe8\xd3\x74\xda" +
	"\x52\x95\xec\x74\x1b\xa7\xfc\xf9\x38\x25\x6f\x0b\xf8\x0e\x00\x00\xff\xff\x2c\xa1\x2f\xe4\x90\x01\x00\x00")

func bindataTemplatesunlockhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesunlockhtml,
		"templates/unlock.html",
	)
}



func bindataTemplatesunlockhtml() (*asset, error) {
	bytes, err := bindataTemplatesunlockhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/unlock.html",
		size: 400,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547789049, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesviewbloghtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4d\x6b\xc3\x30\x0c\xbd\x07\xf2\x1f\x34\xd3\xe3\x48\x68\x8f\xc3" +
	"\xf1\x61\x8c\xb1\xe3\x60\xdb\x0f\x70\x2b\x35\x0e\x73\x9c\x90\xb8\x63\x45\xcb\x7f\x1f\x8a\xfb\xc9\x60\xf4\x22\x83" +
	"\xa4\xf7\xf4\x64\x3d\x7d\x87\xdd\x26\xee\x7b\x02\x17\x5b\x6f\xf2\x4c\xcb\x0b\xde\x86\xba\x52\x14\x94\xc9\x33\x66" +
	"\x88\xd4\xf6\xde\x46\x02\xe5\xc8\x62\x21\x2d\x0a\x8a\x47\xdf\xd5\xc5\x7b\x13\x3d\x4d\x53\x9e\xe9\x75\x87\x7b\x93" +
	"\x67\x42\xb1\x34\xcc\x57\x65\x5d\xba\x65\xaa\x61\xf3\x75\x2a\xbe\xc4\xd6\x4b\x4d\x72\x09\x38\x9c\x9a\x60\xe3\xed" +
	"\x38\x56\x6a\x68\x6a\x17\x45\x06\x00\x00\x73\xb3\x85\xe2\x23\xf8\x6e\xf3\x49\x28\x53\x25\xab\x2d\xb8\x81\xb6\x95" +
	"\x2a\x8f\xc4\x12\xde\xfc\xae\x9e\xa6\xd2\x22\x2a\x63\x11\x75\x69\x0f\x24\x3f\xff\x03\x08\x9b\xa8\x8c\xc4\x9b\x21" +
	"\x22\x47\x19\x89\x67\x08\x33\xf9\x91\x6e\x92\xb8\x0b\x89\x20\xbd\x57\x14\x61\x5e\xf2\xfc\x43\xcc\x30\xd8\x50\x13" +
	"\x2c\x9a\x80\xf4\x7d\x0f\x8b\xde\xd6\x04\x0f\x15\x14\xaf\xb6\xa6\x11\x4e\x03\xdd\xca\x5c\x0e\x5d\xfc\x99\xca\x3c" +
	"\x63\x67\x5c\x4a\x29\xc3\x9c\x08\xd3\xd9\x40\x6e\x63\x8d\x2e\xdd\xea\xa0\x48\xf7\xc7\xb3\x8c\xbb\x75\x94\x9e\x0b" +
	"\xcc\x73\x37\xb4\x36\x46\xc2\x27\x71\x8a\x60\xfb\xe4\x1e\x0a\x38\xeb\x92\x45\x0e\x26\xd1\xe5\x6c\xb7\xdf\x00\x00" +
	"\x00\xff\xff\x82\x54\x25\x37\x7e\x02\x00\x00")

func bindataTemplatesviewbloghtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesviewbloghtml,
		"templates/viewblog.html",
	)
}



func bindataTemplatesviewbloghtml() (*asset, error) {
	bytes, err := bindataTemplatesviewbloghtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/viewblog.html",
		size: 638,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547788953, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesviewpagehtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x4d\x4e\xc4\x30\x0c\x85\xf7\x95\x7a\x07\x93\x03\x34\x9a\x7d\x9a" +
	"\x05\x42\x88\x25\x12\x70\x00\xd3\x78\x92\x88\xfc\x54\xad\x19\x69\x14\x7a\x77\xe4\xce\x94\x1d\x9b\x44\xf6\x7b\xfe" +
	"\x64\x3f\xf3\xe0\xea\xc4\xd7\x99\x20\x70\x4e\xb6\xef\x8c\xfc\x90\xb0\xf8\x51\x51\x51\xb6\xef\x5a\x03\xa6\x3c\x27" +
	"\x64\x02\x15\x08\xdd\x20\x16\x05\xc3\x7b\xe4\x44\xdb\xd6\x77\xe6\xb3\xba\xab\xed\xbb\xbe\x33\x2e\x5e\x60\x4a\xb8" +
	"\xae\xa3\x5a\xa2\x0f\x2c\x00\x00\x00\x83\x10\x16\x3a\x8f\x4a\xb7\x36\x3c\xa6\xea\xdf\xd2\xb7\xdf\x36\x65\x43\xcd" +
	"\x64\x34\x5a\xb8\xf9\x5a\x8b\x67\x18\x3e\x4a\xaa\xd3\x17\x39\x81\x4b\xf7\xe7\xbf\x79\xa9\x5e\xd1\xd3\xbd\x22\x17" +
	"\x59\x59\x79\x05\x79\x10\xa9\xec\x20\xa3\x5d\xbc\xdc\xb6\x0c\x27\xdb\xda\xb1\xbf\xd1\xe1\x24\x87\xaf\x33\x16\x69" +
	"\x3f\xd7\x25\x23\x33\xb9\x27\xe4\x5d\xde\x85\xe3\x3a\x71\xbc\x70\x4e\x22\xfc\xf1\xf4\x3d\x00\xa3\xf7\x14\x7f\x03" +
	"\x00\x00\xff\xff\xbe\xa2\xad\x0a\x55\x01\x00\x00")

func bindataTemplatesviewpagehtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesviewpagehtml,
		"templates/viewpage.html",
	)
}



func bindataTemplatesviewpagehtml() (*asset, error) {
	bytes, err := bindataTemplatesviewpagehtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/viewpage.html",
		size: 341,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547789060, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataStatictesttxt = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x49\x2d\x2e\x01\x04\x00\x00\xff\xff\x0c\x7e\x7f\xd8\x04\x00\x00\x00" +
	"")

func bindataStatictesttxtBytes() ([]byte, error) {
	return bindataRead(
		_bindataStatictesttxt,
		"static/test.txt",
	)
}



func bindataStatictesttxt() (*asset, error) {
	bytes, err := bindataStatictesttxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "static/test.txt",
		size: 4,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547867397, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"templates/deletepage.html": bindataTemplatesdeletepagehtml,
	"templates/editblog.html":   bindataTemplateseditbloghtml,
	"templates/editpage.html":   bindataTemplateseditpagehtml,
	"templates/head.html":       bindataTemplatesheadhtml,
	"templates/unlock.html":     bindataTemplatesunlockhtml,
	"templates/viewblog.html":   bindataTemplatesviewbloghtml,
	"templates/viewpage.html":   bindataTemplatesviewpagehtml,
	"static/test.txt":           bindataStatictesttxt,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"static": {Func: nil, Children: map[string]*bintree{
		"test.txt": {Func: bindataStatictesttxt, Children: map[string]*bintree{}},
	}},
	"templates": {Func: nil, Children: map[string]*bintree{
		"deletepage.html": {Func: bindataTemplatesdeletepagehtml, Children: map[string]*bintree{}},
		"editblog.html": {Func: bindataTemplateseditbloghtml, Children: map[string]*bintree{}},
		"editpage.html": {Func: bindataTemplateseditpagehtml, Children: map[string]*bintree{}},
		"head.html": {Func: bindataTemplatesheadhtml, Children: map[string]*bintree{}},
		"unlock.html": {Func: bindataTemplatesunlockhtml, Children: map[string]*bintree{}},
		"viewblog.html": {Func: bindataTemplatesviewbloghtml, Children: map[string]*bintree{}},
		"viewpage.html": {Func: bindataTemplatesviewpagehtml, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
