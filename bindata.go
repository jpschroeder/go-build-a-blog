// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates\deletepage.html
// templates\editblog.html
// templates\editpage.html
// templates\head.html
// templates\unlock.html
// templates\viewblog.html
// templates\viewpage.html
// static\test.txt

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTemplatesdeletepagehtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x4b\x6e\xc3\x20\x10\x86\xd7\xb5\xe4\x3b\x4c\xe7\x00\xe1\x02\xe0" +
	"\xaa\x55\xf7\x8d\x94\x5e\x80\x84\x09\x20\x81\xb1\xcc\xe0\xc8\x72\x73\xf7\x0a\xdb\x7d\x6c\xba\xe8\x86\x87\xf4\x7f" +
	"\xc3\xa7\x1f\xf9\x68\xd2\x85\xe7\x81\xc0\x71\x0c\x5d\xdb\xc8\xba\x43\xd0\xbd\x55\x48\x3d\x76\x6d\xb3\x2c\xc0\x14" +
	"\x87\xa0\x99\x00\x1d\x69\x73\xa8\x11\x84\xc3\x4b\x48\xf6\x14\x8a\xbd\xdf\xdb\x46\x9e\x93\x99\xbb\xb6\x69\x1b\x69" +
	"\xfc\x04\x97\xa0\x73\x56\x38\x7a\xeb\xb8\xce\x00\x00\x90\x1a\xdc\x48\x57\x85\x62\x59\x7e\xb1\xd8\xb9\x14\x49\x0a" +
	"\xbd\xc7\x3e\xfe\x0a\xd6\xdb\x51\x5b\xfa\xc2\x26\x4f\xb7\x7f\x63\x82\x8c\x67\xec\xea\xba\xb1\x52\x18\x3f\x6d\xe2" +
	"\xd7\x34\x46\x88\xc4\x2e\x19\x85\xc7\xb7\xd3\xfb\xb7\x79\x8d\x3c\x8f\x04\x73\x2a\x90\xcb\x7e\xb8\xe9\x9e\x81\x13" +
	"\x18\x0a\xc4\x04\xec\x7c\x86\x41\x5b\x7a\xfa\x19\xf9\x20\x7d\x3f\x14\x86\x5a\xb0\xc2\x5c\xce\xd1\x33\xc2\xa4\x43" +
	"\x21\x85\xaf\x2b\x87\x20\x56\x8b\xfa\xf8\xa6\x21\xf6\x2a\xa5\x58\xbf\xe4\x33\x00\x00\xff\xff\x9b\xf1\x04\x47\xa2" +
	"\x01\x00\x00")

func bindataTemplatesdeletepagehtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesdeletepagehtml,
		"templates/deletepage.html",
	)
}



func bindataTemplatesdeletepagehtml() (*asset, error) {
	bytes, err := bindataTemplatesdeletepagehtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/deletepage.html",
		size: 418,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547789008, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplateseditbloghtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\xc1\x8a\xf3\x20\x14\x85\xd7\x7f\x20\xef\x70\xff\x0b\xb3\x8d\x74" +
	"\xaf\x2e\xfa\x02\x33\xd0\xbe\xc0\x6d\xbd\x8d\x82\xc6\x60\x6e\xc2\x14\xc9\xbb\x0f\xb6\x93\x59\x09\x47\xfd\xce\xc7" +
	"\xd1\xff\x5d\xbe\xcb\x73\x66\xf0\x92\xa2\xed\x3b\xdd\x4e\x88\x34\x8d\x06\x79\x42\xdb\x77\xb5\x82\x70\x9a\x23\x09" +
	"\x03\x7a\x26\x37\xb4\x27\x08\xc3\x35\x48\xe4\x7d\xef\x3b\x7d\xcb\xee\x69\xfb\xae\xef\xb4\x0b\x1b\xdc\x23\x2d\x8b" +
	"\xc1\x12\x46\x2f\x0d\x00\x00\xa0\x09\x7c\xe1\x87\x41\x55\xeb\x70\x8e\x79\xbc\xc4\x75\xdc\x77\xb4\x3e\x27\xd6\x8a" +
	"\x5a\xb3\x72\x61\x7b\x53\x1e\xb9\x24\x48\x2c\x3e\x3b\x83\x5f\x9f\x97\xeb\x1f\xc6\x9f\x6c\xad\x47\xb3\x56\xfe\x74" +
	"\x5c\x08\x7f\x0b\x15\x26\x98\x28\xb1\xc1\x66\x84\x30\x47\xba\xb3\xcf\xd1\x71\x31\x78\x6e\x91\xad\x75\x2e\x61\x92" +
	"\x07\xe0\xc7\x82\x30\xb4\xb0\x81\x8e\xef\xaf\xfe\x7f\x3a\x4c\xf3\x2a\xd0\x76\x31\xb8\xac\xb7\x14\x04\x61\xa3\xb8" +
	"\xb2\xc1\x0b\x6d\x8c\xa0\x5e\xc2\xcd\xf3\x6d\xac\x7e\x27\xd0\xea\xb5\xe3\x4f\x00\x00\x00\xff\xff\xd0\x80\xe1\x74" +
	"\x57\x01\x00\x00")

func bindataTemplateseditbloghtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplateseditbloghtml,
		"templates/editblog.html",
	)
}



func bindataTemplateseditbloghtml() (*asset, error) {
	bytes, err := bindataTemplateseditbloghtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/editblog.html",
		size: 343,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547789019, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplateseditpagehtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x6d\x6f\xdb\x36\x10\xfe\x3c\x03\xfe\x0f\x1c\x87\xa2\x29\xea\x8a" +
	"\x4d\xba\x16\xab\x26\x1b\x6b\xba\x0c\x2b\xb6\x6e\x05\x12\x60\x1f\x8a\x7e\xa0\xc4\x93\x44\x9b\x2f\x2a\x49\xd9\x32" +
	"\x34\xfd\xf7\x81\x7a\xb1\x95\x60\x0c\x6a\x80\x47\xfa\xee\xe1\x73\x77\xe4\xe9\xa4\xe4\x7b\xa6\x33\x77\xac\x00\x95" +
	"\x4e\x8a\xcd\x72\x91\xf8\x19\x09\xaa\x8a\x35\x06\x85\x37\xcb\x45\xdb\x22\x07\xb2\x12\xd4\x01\xc2\x25\x50\x16\x79" +
	"\x08\x46\xd1\x1d\x77\x02\xba\x6e\xb9\x48\x04\x57\x3b\x64\x40\xac\xb1\x75\x47\x01\xb6\x04\x70\x18\x95\x06\xf2\x35" +
	"\x2e\x9d\xab\x6c\x4c\x48\xc6\xd4\xd6\x46\x99\xd0\x35\xcb\x05\x35\x10\x65\x5a\x12\xba\xa5\x0d\x11\x3c\xb5\x24\xd3" +
	"\x0c\x24\x37\x46\x1b\xf2\x3a\xfa\xf1\x2a\xba\x9a\x69\x22\xc9\x55\x94\x59\xeb\xa3\x49\x7a\x0f\x9b\xe5\x22\x7a\xaf" +
	"\x19\x7c\xec\xed\xa8\x5d\x2e\x10\x42\xa8\x04\x5e\x94\x2e\x46\x6f\x5e\xbe\xac\x9a\x9f\x07\x9d\xa4\xa6\xe0\xea\x45" +
	"\xaa\x9d\xd3\x32\x46\x97\xd1\x6b\x90\xa3\x29\xd5\x86\x81\x89\xd1\x65\xd5\x20\xae\x2c\x38\x64\x8a\xf4\xe2\xea\xd5" +
	"\x4f\x2b\x34\x89\x67\x23\xb4\xa2\x8c\x71\x55\xc4\xc8\x6f\x47\x97\x4f\x46\xf5\x81\x33\x57\xc6\xe8\xed\x5b\xaf\xf0" +
	"\x07\x41\xa6\xe8\x92\x54\xb3\xe3\x66\xb9\x58\x2e\x12\xc6\xf7\x28\x13\xd4\xda\x35\x36\x3e\x3e\x9f\x85\xdf\x9c\xd0" +
	"\xf1\x84\x48\xdb\x46\xd7\x42\x17\xb7\xa2\x2e\xba\x0e\x6f\x4a\x2d\x21\x21\x74\x84\xb5\x2d\xcf\x51\xf4\x89\x16\x30" +
	"\xd8\x07\xed\xbf\xa1\xed\xfe\xdf\x19\x8c\x37\x7b\x0e\x87\x33\xd9\x37\x6e\x23\x0c\x04\x38\xc0\x9b\x61\x9e\x07\x03" +
	"\x8a\xf5\x57\x4e\x18\xdf\x0f\xf9\xe5\xda\x48\x24\xc1\x95\x9a\xad\xf1\xa7\xbf\x6f\xef\x4e\x09\x72\x55\xd5\x0e\xf9" +
	"\xea\x5a\x63\x07\x8d\xc3\x48\x51\xe9\xd7\xbe\x70\x30\xda\x53\x51\xc3\x1a\xb7\xed\x54\x49\x18\x55\x82\x66\x50\x6a" +
	"\xc1\xc0\xac\xf1\xdd\x00\x23\x13\xdd\xe0\x11\x8d\xbf\x7b\xec\x8c\x3a\x70\x5c\xc2\x0b\xa1\x33\x2a\x26\x3f\x5e\x3b" +
	"\x77\xf3\x9b\x36\x92\x3a\x07\xec\x57\xea\xe0\x8e\xcb\xde\x25\x09\x71\x66\x25\x64\xbb\x54\x37\x13\x9b\x2d\xf5\x01" +
	"\x8f\xd7\x71\x5b\xea\x43\xd7\xf5\x08\x60\x23\x14\x18\x1e\x8f\x67\x72\x79\xe9\xd9\x91\xc7\x22\xae\xd0\x9f\xdc\x3a" +
	"\xae\x8a\x31\x19\x72\xce\x26\xf1\x67\x43\x0d\xd0\xd1\x91\x2f\x9d\x07\x47\x71\xdd\xab\x38\x1b\x8d\x9b\xb6\xad\x0c" +
	"\x57\x2e\x47\xf8\x89\xc5\x28\xf2\xe6\xae\x4b\xc8\x44\x34\x12\xcf\x0b\xe8\xc6\x3f\x28\x53\xf5\xcc\x6b\x12\xbc\xc1" +
	"\x33\x4e\x90\x79\x68\xa7\xfb\x5e\x2e\xbe\xbb\x77\x38\xb6\x4e\x25\x77\xa7\xc3\xbd\xa5\xfb\xf1\xa6\x12\xe2\xeb\x61" +
	"\xa8\x0c\x9b\x19\x5e\x39\x64\x4d\xf6\xcd\x6d\xc0\xc0\xd7\x9a\x1b\x88\xb6\x96\x5c\x45\xaf\xa2\x37\x27\x85\x6f\x01" +
	"\x5b\x8b\x37\x09\x19\x58\x37\x27\xfe\xcd\x72\x31\x82\x3c\xb1\x56\x39\x2f\x2e\xda\xe9\xb1\xcd\x76\xb4\x00\x1b\xa3" +
	"\xcf\xed\xf9\x96\xfd\x29\xc7\x08\x9f\xfb\x0b\x5e\x9d\x8d\xbe\x80\x1c\xd7\x2a\x46\xf3\x90\xa3\xad\x65\x20\xf8\xde" +
	"\x44\x0a\x1c\x51\x95\x9c\x75\xa7\x5f\x86\x7e\x35\x27\x91\x94\x7b\x02\xc1\xd3\x19\x0e\x0f\xf6\xee\xcb\x6a\xb9\xe8" +
	"\x7c\x63\x39\x45\x7d\xf1\x79\x30\xfd\x4f\x48\x33\x15\x91\x9a\x01\x91\xd4\xec\x98\x3e\xa8\xd3\x22\x88\xcc\x04\xdf" +
	"\x8d\x12\xaf\x10\x21\x28\x5b\x65\xcf\x9f\xaf\xb2\x1f\x42\x78\x6b\xfd\x08\xf2\x31\x9d\xed\xc0\xe4\x5c\xcc\x97\x61" +
	"\x34\xcf\xf3\x5e\x04\x11\x60\xfc\x5b\x66\x9c\xc2\xf9\x8a\x3e\x8d\x61\x1a\xf2\xc8\x43\x19\x14\x9a\x14\x3a\xc8\x54" +
	"\x52\xc5\x04\xa4\xd4\xd8\xd9\xf2\x11\xb4\xdd\x81\x10\xd3\x1c\xc6\x39\x29\x40\xa6\xc0\x18\xb0\x7b\x7f\x86\x58\xb7" +
	"\xb6\x5a\x51\x5b\xf9\xb2\x79\x84\x40\xf2\x66\xdc\xdd\xaf\x1e\x71\xe6\xaa\x5e\x04\x11\x5b\xba\xa7\xc3\x63\x31\x5b" +
	"\x86\xd1\xb6\xf1\x23\x68\x17\x35\xf5\x23\x68\x2f\x72\xe9\xc7\x90\x6a\xc1\x5d\x59\xa7\x68\xaa\xcb\xc0\x16\x55\x70" +
	"\xd5\x0c\x32\x48\x5b\x81\x11\xbd\x08\x23\xca\xca\x8f\xb0\x5d\x1f\xc0\xd8\xd2\x5f\xe0\x79\x19\x46\x1f\x5d\xa9\xd5" +
	"\x38\x05\x51\xa6\x4e\x8f\xbd\x78\x04\x61\x5d\x2f\x82\x88\x21\xa4\xc7\xa3\xb1\x5f\x85\x1f\x61\xbb\x83\xa6\x17\x41" +
	"\x44\x23\x85\x1f\x41\xfb\x91\x4a\xd1\x8b\xb1\x25\x7d\x19\x81\x79\xad\x32\xdf\xfb\x2e\xce\x9f\x56\xcf\xd0\xac\x71" +
	"\xee\xa9\x41\xc0\xb8\xd3\x06\xad\xd1\x19\x13\xe5\x46\xcb\x3b\x68\xdc\x3b\x03\xf4\x82\xe9\xac\x96\xa0\x5c\x54\x80" +
	"\xbb\x11\xe0\x97\xd7\xc7\x0f\xec\x62\x78\x73\x3d\x5b\xcd\x09\xfb\x5e\xa9\x19\xc4\xe8\x69\x91\xcb\xa7\xab\xfb\x16" +
	"\xc1\x15\xfc\x55\xcb\x14\x8c\x8d\x51\x4e\x85\x85\x07\x00\x57\x42\xdf\xc9\x19\xe4\xb4\x16\x0e\x3f\x30\x43\xe3\x0c" +
	"\xfd\x03\x8e\x36\x46\x2d\xbe\x51\x0e\x0c\x8e\x11\x56\x70\xf0\xc4\xef\x14\xfb\xa0\x18\x28\xf7\x5e\x2b\xc7\x55\x0d" +
	"\x1f\xc7\xba\xf5\xaf\x69\xdc\x3d\xa0\xca\x41\x65\xc0\x7c\xca\xd7\x42\x67\xbb\xdf\x79\x51\x0a\xff\x2d\xd7\x7f\x13" +
	"\x3a\x53\x3f\x8c\xcc\x7b\xf8\xc7\xd0\xaa\x3a\x01\xce\xf6\x6e\xfa\xa8\xec\x96\x0b\xbf\x9c\xbf\xd1\xc8\xf8\xd9\x98" +
	"\xf4\xcd\x60\xf3\x5f\x00\x00\x00\xff\xff\x18\x3f\x7f\xa7\x9e\x0b\x00\x00")

func bindataTemplateseditpagehtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplateseditpagehtml,
		"templates/editpage.html",
	)
}



func bindataTemplateseditpagehtml() (*asset, error) {
	bytes, err := bindataTemplateseditpagehtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/editpage.html",
		size: 2974,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547957792, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesheadhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xcd\x8e\xdb\x3c\x0c\xbc\x7f\xc0\xf7\x0e\x44\x8a\xbd\x45\xce\x0f" +
	"\xda\xa2\x71\xe3\x3d\xf5\x2d\x8a\x3d\x30\x12\x1d\x0b\x95\x45\x43\x62\xe2\xa4\x41\xde\xbd\xb0\xe3\x64\xe5\x78\x7b" +
	"\x68\x4e\x12\x39\x23\x92\xc3\x89\xb7\x15\xa1\x79\xfd\xff\x3f\x00\x80\x6d\x4d\x82\xa0\x2b\x0c\x91\xa4\x98\x1d\xa4" +
	"\x54\xdf\x66\xa3\x9c\xc7\x9a\x8a\xd9\xd1\x52\xdb\x70\x90\x19\x68\xf6\x42\x5e\x8a\x59\x6b\x8d\x54\x85\xa1\xa3\xd5" +
	"\xa4\xfa\xcb\x1c\xac\xb7\x62\xd1\xa9\xa8\xd1\x51\xb1\xca\x96\x1f\xbd\xf5\x83\xa2\x0e\xb6\x11\xcb\x3e\x79\xee\x72" +
	"\xc9\xae\xd7\x0e\x3e\x10\xc4\x8a\xa3\xd7\x3e\xba\x5d\xdc\x2e\x43\x26\xca\xf9\x71\xd9\xb1\x39\xc3\xe5\x76\xee\x7e" +
	"\x25\x7b\x51\x25\xd6\xd6\x9d\x73\x88\xe8\xa3\x8a\x14\x6c\xf9\xfd\x1d\xe1\xac\x27\x55\x91\xdd\x57\x92\xc3\x2a\xfb" +
	"\x42\x75\x92\xac\xf1\x74\x1b\x25\x87\xcf\xeb\xa7\x4c\xd8\x5b\x9f\x03\x1e\x84\x93\x70\x83\xc6\x58\xbf\xcf\x61\xf5" +
	"\x40\x5f\xef\x23\x54\xab\x39\x54\xeb\x49\x77\xed\x50\xdb\x73\xa8\xd1\x4d\x48\xeb\x39\x94\x1c\xea\x94\x36\x14\x51" +
	"\xc2\x4d\x0e\xcb\xa4\xe5\x07\x0b\x53\xb8\xd0\x49\x94\x21\xcd\x01\x3b\x8d\xbb\x4a\x9e\xde\x19\x00\xb7\xa3\x66\x43" +
	"\x29\x6d\x87\xfa\xd7\x3e\xf0\xc1\x9b\x1c\x3e\x11\xd1\x73\x8d\x26\x8c\xe0\x7c\xa4\x50\x3a\x6e\xd5\x69\x24\xca\x03" +
	"\xde\x75\x81\x81\xb0\x33\x45\x73\x90\x9f\x72\x6e\xa8\xe8\x82\x6f\xa3\x88\x41\x21\xb1\x35\x29\xc7\x1a\xdd\x38\xd7" +
	"\x60\x8c\x2d\x07\xf3\x36\xd1\x30\xda\xdf\x94\x6a\x3e\x5a\x45\x27\x10\xac\x5e\x26\xcb\x53\x3b\x16\xe1\x7a\xbc\xf5" +
	"\x7f\xed\xf7\xc3\x9e\x06\xcb\x6c\x36\x2f\x7f\x7b\x35\x45\xdf\xcd\xf7\x75\xb9\x6c\x4e\xcf\x84\x2c\x1e\x76\xbd\xdb" +
	"\x53\xc6\xd0\x7f\xbf\x7f\x35\x9e\x3a\x91\x63\x99\x6d\xa6\x63\x65\xa1\x2b\x36\xb1\x07\x3a\xbb\xf7\x39\xf4\xc9\x09" +
	"\x85\x42\xe0\x90\x52\x34\x3b\x0e\x39\x04\x32\xa9\x8d\x00\xb6\x8b\xfb\x7f\x71\xbb\xe8\x3f\x2a\x7f\x02\x00\x00\xff" +
	"\xff\x0d\xf7\xa8\xb2\x5b\x04\x00\x00")

func bindataTemplatesheadhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesheadhtml,
		"templates/head.html",
	)
}



func bindataTemplatesheadhtml() (*asset, error) {
	bytes, err := bindataTemplatesheadhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/head.html",
		size: 1115,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547957071, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesunlockhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\x4b\x6e\xf3\x20\x10\xc7\xd7\x9f\x25\xee\x30\xdf\xec\x1b\x2e\x00" +
	"\x5e\x54\xea\xaa\x8b\x56\x4a\x7b\x80\x89\x99\x18\x14\x5e\xc2\x38\x55\x84\x72\xf7\x8a\xb8\xa9\xd2\x15\x12\xcc\xff" +
	"\xf1\x63\xd4\x7f\x93\xa6\x7a\xc9\x0c\xb6\x06\x3f\x8a\x41\xf5\x13\x3c\xc5\x59\x23\x47\x1c\xc5\xd0\x1a\x54\x0e\xd9" +
	"\x53\x65\x40\xcb\x64\x76\x7d\x04\x61\xf7\xec\xd3\xbc\xf7\xeb\x7c\xbd\x8a\x41\x1d\x92\xb9\x8c\x62\x10\x83\x32\xee" +
	"\x0c\x93\xa7\x65\xd1\x58\xdc\x6c\x6b\xf7\x00\x00\x50\x04\xb6\xf0\x51\xa3\x6c\xed\x41\x8b\xa3\x4d\x81\x95\xa4\x1e" +
	"\x2e\x8d\x3b\x6f\x2e\xc7\x54\x02\x04\xae\x36\x19\x8d\xef\x6f\xfb\x8f\x5f\x1b\x17\xf3\x5a\xa1\x77\xd6\x98\x69\x59" +
	"\xbe\x52\x31\x08\x91\x02\x6b\x3c\xf1\x05\x21\x7b\x9a\xd8\x26\x6f\xb8\x68\x7c\xed\x37\x86\x2a\x3d\xf9\xec\xe6\x98" +
	"\x0a\x6b\xac\x65\x65\x04\x79\x0b\xea\x96\xad\xb9\x23\xec\x5e\x4a\x49\xa5\xb3\xdc\x52\x1e\x28\xb8\x3f\xe0\xd8\xda" +
	"\x7d\xe4\x5e\x73\xd3\x72\x34\x5d\x25\x86\x7f\x7f\xaa\x2d\xeb\x21\xb8\x8a\x70\x26\xbf\xb2\xc6\xcf\xe8\xd3\x74\xda" +
	"\x52\x95\xec\x74\x1b\xa7\xfc\xf9\x38\x25\x6f\x0b\xf8\x0e\x00\x00\xff\xff\x2c\xa1\x2f\xe4\x90\x01\x00\x00")

func bindataTemplatesunlockhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesunlockhtml,
		"templates/unlock.html",
	)
}



func bindataTemplatesunlockhtml() (*asset, error) {
	bytes, err := bindataTemplatesunlockhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/unlock.html",
		size: 400,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547789049, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesviewbloghtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4d\x6b\xc3\x30\x0c\xbd\x07\xf2\x1f\x34\xd3\xe3\x48\x68\x8f\xc3" +
	"\xf1\x61\x8c\xb1\xe3\x60\xdb\x0f\x70\x2b\x35\x0e\x73\x9c\x90\xb8\x63\x45\xcb\x7f\x1f\x8a\xfb\xc9\x60\xf4\x22\x83" +
	"\xa4\xf7\xf4\x64\x3d\x7d\x87\xdd\x26\xee\x7b\x02\x17\x5b\x6f\xf2\x4c\xcb\x0b\xde\x86\xba\x52\x14\x94\xc9\x33\x66" +
	"\x88\xd4\xf6\xde\x46\x02\xe5\xc8\x62\x21\x2d\x0a\x8a\x47\xdf\xd5\xc5\x7b\x13\x3d\x4d\x53\x9e\xe9\x75\x87\x7b\x93" +
	"\x67\x42\xb1\x34\xcc\x57\x65\x5d\xba\x65\xaa\x61\xf3\x75\x2a\xbe\xc4\xd6\x4b\x4d\x72\x09\x38\x9c\x9a\x60\xe3\xed" +
	"\x38\x56\x6a\x68\x6a\x17\x45\x06\x00\x00\x73\xb3\x85\xe2\x23\xf8\x6e\xf3\x49\x28\x53\x25\xab\x2d\xb8\x81\xb6\x95" +
	"\x2a\x8f\xc4\x12\xde\xfc\xae\x9e\xa6\xd2\x22\x2a\x63\x11\x75\x69\x0f\x24\x3f\xff\x03\x08\x9b\xa8\x8c\xc4\x9b\x21" +
	"\x22\x47\x19\x89\x67\x08\x33\xf9\x91\x6e\x92\xb8\x0b\x89\x20\xbd\x57\x14\x61\x5e\xf2\xfc\x43\xcc\x30\xd8\x50\x13" +
	"\x2c\x9a\x80\xf4\x7d\x0f\x8b\xde\xd6\x04\x0f\x15\x14\xaf\xb6\xa6\x11\x4e\x03\xdd\xca\x5c\x0e\x5d\xfc\x99\xca\x3c" +
	"\x63\x67\x5c\x4a\x29\xc3\x9c\x08\xd3\xd9\x40\x6e\x63\x8d\x2e\xdd\xea\xa0\x48\xf7\xc7\xb3\x8c\xbb\x75\x94\x9e\x0b" +
	"\xcc\x73\x37\xb4\x36\x46\xc2\x27\x71\x8a\x60\xfb\xe4\x1e\x0a\x38\xeb\x92\x45\x0e\x26\xd1\xe5\x6c\xb7\xdf\x00\x00" +
	"\x00\xff\xff\x82\x54\x25\x37\x7e\x02\x00\x00")

func bindataTemplatesviewbloghtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesviewbloghtml,
		"templates/viewblog.html",
	)
}



func bindataTemplatesviewbloghtml() (*asset, error) {
	bytes, err := bindataTemplatesviewbloghtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/viewblog.html",
		size: 638,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547788953, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesviewpagehtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x4d\x4e\xc4\x30\x0c\x85\xf7\x95\x7a\x07\x93\x03\x34\x9a\x7d\x9a" +
	"\x05\x42\x88\x25\x12\x70\x00\xd3\x78\x92\x88\xfc\x54\xad\x19\x69\x14\x7a\x77\xe4\xce\x94\x1d\x9b\x44\xf6\x7b\xfe" +
	"\x64\x3f\xf3\xe0\xea\xc4\xd7\x99\x20\x70\x4e\xb6\xef\x8c\xfc\x90\xb0\xf8\x51\x51\x51\xb6\xef\x5a\x03\xa6\x3c\x27" +
	"\x64\x02\x15\x08\xdd\x20\x16\x05\xc3\x7b\xe4\x44\xdb\xd6\x77\xe6\xb3\xba\xab\xed\xbb\xbe\x33\x2e\x5e\x60\x4a\xb8" +
	"\xae\xa3\x5a\xa2\x0f\x2c\x00\x00\x00\x83\x10\x16\x3a\x8f\x4a\xb7\x36\x3c\xa6\xea\xdf\xd2\xb7\xdf\x36\x65\x43\xcd" +
	"\x64\x34\x5a\xb8\xf9\x5a\x8b\x67\x18\x3e\x4a\xaa\xd3\x17\x39\x81\x4b\xf7\xe7\xbf\x79\xa9\x5e\xd1\xd3\xbd\x22\x17" +
	"\x59\x59\x79\x05\x79\x10\xa9\xec\x20\xa3\x5d\xbc\xdc\xb6\x0c\x27\xdb\xda\xb1\xbf\xd1\xe1\x24\x87\xaf\x33\x16\x69" +
	"\x3f\xd7\x25\x23\x33\xb9\x27\xe4\x5d\xde\x85\xe3\x3a\x71\xbc\x70\x4e\x22\xfc\xf1\xf4\x3d\x00\xa3\xf7\x14\x7f\x03" +
	"\x00\x00\xff\xff\xbe\xa2\xad\x0a\x55\x01\x00\x00")

func bindataTemplatesviewpagehtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesviewpagehtml,
		"templates/viewpage.html",
	)
}



func bindataTemplatesviewpagehtml() (*asset, error) {
	bytes, err := bindataTemplatesviewpagehtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/viewpage.html",
		size: 341,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547789060, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataStatictesttxt = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x49\x2d\x2e\x01\x04\x00\x00\xff\xff\x0c\x7e\x7f\xd8\x04\x00\x00\x00" +
	"")

func bindataStatictesttxtBytes() ([]byte, error) {
	return bindataRead(
		_bindataStatictesttxt,
		"static/test.txt",
	)
}



func bindataStatictesttxt() (*asset, error) {
	bytes, err := bindataStatictesttxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "static/test.txt",
		size: 4,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547867397, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"templates/deletepage.html": bindataTemplatesdeletepagehtml,
	"templates/editblog.html":   bindataTemplateseditbloghtml,
	"templates/editpage.html":   bindataTemplateseditpagehtml,
	"templates/head.html":       bindataTemplatesheadhtml,
	"templates/unlock.html":     bindataTemplatesunlockhtml,
	"templates/viewblog.html":   bindataTemplatesviewbloghtml,
	"templates/viewpage.html":   bindataTemplatesviewpagehtml,
	"static/test.txt":           bindataStatictesttxt,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"static": {Func: nil, Children: map[string]*bintree{
		"test.txt": {Func: bindataStatictesttxt, Children: map[string]*bintree{}},
	}},
	"templates": {Func: nil, Children: map[string]*bintree{
		"deletepage.html": {Func: bindataTemplatesdeletepagehtml, Children: map[string]*bintree{}},
		"editblog.html": {Func: bindataTemplateseditbloghtml, Children: map[string]*bintree{}},
		"editpage.html": {Func: bindataTemplateseditpagehtml, Children: map[string]*bintree{}},
		"head.html": {Func: bindataTemplatesheadhtml, Children: map[string]*bintree{}},
		"unlock.html": {Func: bindataTemplatesunlockhtml, Children: map[string]*bintree{}},
		"viewblog.html": {Func: bindataTemplatesviewbloghtml, Children: map[string]*bintree{}},
		"viewpage.html": {Func: bindataTemplatesviewpagehtml, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
