// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates\deletepage.html
// templates\editblog.html
// templates\editpage.html
// templates\head.html
// templates\unlock.html
// templates\viewblog.html
// templates\viewpage.html

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTemplatesdeletepagehtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x4b\x6e\xc3\x20\x10\x86\xd7\xb5\xe4\x3b\x4c\xe7\x00\xe1\x02\xe0" +
	"\xaa\x55\xf7\x8d\x94\x5e\x80\x84\x09\x20\x81\xb1\xcc\xe0\xc8\x72\x73\xf7\x0a\xdb\x7d\x6c\xba\xe8\x86\x87\xf4\x7f" +
	"\xc3\xa7\x1f\xf9\x68\xd2\x85\xe7\x81\xc0\x71\x0c\x5d\xdb\xc8\xba\x43\xd0\xbd\x55\x48\x3d\x76\x6d\xb3\x2c\xc0\x14" +
	"\x87\xa0\x99\x00\x1d\x69\x73\xa8\x11\x84\xc3\x4b\x48\xf6\x14\x8a\xbd\xdf\xdb\x46\x9e\x93\x99\xbb\xb6\x69\x1b\x69" +
	"\xfc\x04\x97\xa0\x73\x56\x38\x7a\xeb\xb8\xce\x00\x00\x90\x1a\xdc\x48\x57\x85\x62\x59\x7e\xb1\xd8\xb9\x14\x49\x0a" +
	"\xbd\xc7\x3e\xfe\x0a\xd6\xdb\x51\x5b\xfa\xc2\x26\x4f\xb7\x7f\x63\x82\x8c\x67\xec\xea\xba\xb1\x52\x18\x3f\x6d\xe2" +
	"\xd7\x34\x46\x88\xc4\x2e\x19\x85\xc7\xb7\xd3\xfb\xb7\x79\x8d\x3c\x8f\x04\x73\x2a\x90\xcb\x7e\xb8\xe9\x9e\x81\x13" +
	"\x18\x0a\xc4\x04\xec\x7c\x86\x41\x5b\x7a\xfa\x19\xf9\x20\x7d\x3f\x14\x86\x5a\xb0\xc2\x5c\xce\xd1\x33\xc2\xa4\x43" +
	"\x21\x85\xaf\x2b\x87\x20\x56\x8b\xfa\xf8\xa6\x21\xf6\x2a\xa5\x58\xbf\xe4\x33\x00\x00\xff\xff\x9b\xf1\x04\x47\xa2" +
	"\x01\x00\x00")

func bindataTemplatesdeletepagehtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesdeletepagehtml,
		"templates/deletepage.html",
	)
}



func bindataTemplatesdeletepagehtml() (*asset, error) {
	bytes, err := bindataTemplatesdeletepagehtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/deletepage.html",
		size: 418,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547789008, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplateseditbloghtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\xc1\x8a\xf3\x20\x14\x85\xd7\x7f\x20\xef\x70\xff\x0b\xb3\x8d\x74" +
	"\xaf\x2e\xfa\x02\x33\xd0\xbe\xc0\x6d\xbd\x8d\x82\xc6\x60\x6e\xc2\x14\xc9\xbb\x0f\xb6\x93\x59\x09\x47\xfd\xce\xc7" +
	"\xd1\xff\x5d\xbe\xcb\x73\x66\xf0\x92\xa2\xed\x3b\xdd\x4e\x88\x34\x8d\x06\x79\x42\xdb\x77\xb5\x82\x70\x9a\x23\x09" +
	"\x03\x7a\x26\x37\xb4\x27\x08\xc3\x35\x48\xe4\x7d\xef\x3b\x7d\xcb\xee\x69\xfb\xae\xef\xb4\x0b\x1b\xdc\x23\x2d\x8b" +
	"\xc1\x12\x46\x2f\x0d\x00\x00\xa0\x09\x7c\xe1\x87\x41\x55\xeb\x70\x8e\x79\xbc\xc4\x75\xdc\x77\xb4\x3e\x27\xd6\x8a" +
	"\x5a\xb3\x72\x61\x7b\x53\x1e\xb9\x24\x48\x2c\x3e\x3b\x83\x5f\x9f\x97\xeb\x1f\xc6\x9f\x6c\xad\x47\xb3\x56\xfe\x74" +
	"\x5c\x08\x7f\x0b\x15\x26\x98\x28\xb1\xc1\x66\x84\x30\x47\xba\xb3\xcf\xd1\x71\x31\x78\x6e\x91\xad\x75\x2e\x61\x92" +
	"\x07\xe0\xc7\x82\x30\xb4\xb0\x81\x8e\xef\xaf\xfe\x7f\x3a\x4c\xf3\x2a\xd0\x76\x31\xb8\xac\xb7\x14\x04\x61\xa3\xb8" +
	"\xb2\xc1\x0b\x6d\x8c\xa0\x5e\xc2\xcd\xf3\x6d\xac\x7e\x27\xd0\xea\xb5\xe3\x4f\x00\x00\x00\xff\xff\xd0\x80\xe1\x74" +
	"\x57\x01\x00\x00")

func bindataTemplateseditbloghtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplateseditbloghtml,
		"templates/editblog.html",
	)
}



func bindataTemplateseditbloghtml() (*asset, error) {
	bytes, err := bindataTemplateseditbloghtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/editblog.html",
		size: 343,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547789019, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplateseditpagehtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xc1\x8a\xdb\x30\x10\x3d\xd7\xe0\x7f\x98\x0e\xf4\xd8\x88\xde\x65" +
	"\x1f\x96\xb6\xa7\x42\x17\x92\x1f\x50\xac\x89\x25\x2a\x59\x41\x9e\x38\xbb\xa8\xfe\xf7\xa2\x58\x4e\xbc\x85\x85\xf5" +
	"\x45\xf6\xe8\xe9\x3d\xcd\x9b\x67\xf9\x59\x87\x8e\x5f\xcf\x04\x86\xbd\x6b\xeb\x4a\xe6\x15\x9c\x1a\xfa\x06\x69\xc0" +
	"\xb6\xae\x52\x02\x26\x7f\x76\x8a\x09\xd0\x90\xd2\xbb\x0c\x41\xd8\x1d\x2c\x3b\x9a\xe7\xba\x92\xc7\xa0\x5f\xdb\xba" +
	"\xaa\x2b\xa9\xed\x04\x9d\x53\xe3\xd8\x60\xb4\xbd\xe1\x4c\x00\x00\x20\x15\x98\x48\xa7\x06\x45\x4a\xbb\x27\x17\xfa" +
	"\xbd\xbb\xf4\xf3\x8c\xad\x09\x9e\xa4\x50\x05\x96\x92\x3d\xc1\xee\x59\xf5\xb4\xec\x2f\xd5\xbf\xef\x1d\xcf\x5f\x0f" +
	"\x30\xb6\x93\xa5\xeb\x83\xec\x83\xc7\x84\x26\x47\x4c\xd8\x2e\xeb\xf6\x32\x34\xe8\x5b\x7f\x42\xdb\x69\xe9\xef\x14" +
	"\xa2\x07\x4f\x6c\x82\x6e\xf0\xf9\xf7\xfe\x70\x6f\xd0\x0e\xe7\x0b\x43\xb6\xb2\x41\xa6\x17\x46\x18\x94\xcf\xef\xd9" +
	"\x25\x84\x49\xb9\x0b\x35\x98\xd2\x6a\x1b\xc2\xd9\xa9\x8e\x4c\x70\x9a\x62\x83\x87\x05\x26\x56\xba\x45\x11\xca\xf3" +
	"\x86\x5d\x2b\x26\xb6\x9e\xbe\xba\xd0\x29\xb7\xea\xe4\xea\x56\xe6\x67\x88\x5e\x31\x93\xfe\xae\x98\x0e\xd6\xdf\x24" +
	"\xc5\x7b\x9c\x9d\xa1\xee\xcf\x31\xbc\xac\x6c\xa3\x09\x57\x2c\xe3\xd8\x9b\x70\x9d\xe7\x1b\x82\x74\x81\x92\xc6\x62" +
	"\xcf\x2a\xf9\x2d\xb3\x43\xc6\x82\x1d\xe0\x97\x1d\xd9\x0e\x7d\x69\x46\x3c\xba\x91\xd9\x1b\x15\x49\x15\xa1\x1c\x9d" +
	"\xff\xac\x78\xca\xa5\x36\xa5\x73\xb4\x03\x9f\x00\xbf\x8c\x08\xbb\x5c\x9c\x67\x29\xd6\xe3\x85\x6e\x1b\x9b\x1f\x31" +
	"\x86\xb8\x66\x66\x9b\x44\xca\x1b\x99\x71\x85\x6c\x2f\x74\x9f\x72\x5d\x7d\x7a\x63\xc9\x78\x39\x7a\xcb\x77\x4b\xf7" +
	"\x6a\x2a\xf3\x91\x22\xa7\x60\xc9\x83\x28\xd1\x97\xe2\xf6\xff\xfc\x0b\x00\x00\xff\xff\x85\x85\xc1\xef\x4f\x03\x00" +
	"\x00")

func bindataTemplateseditpagehtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplateseditpagehtml,
		"templates/editpage.html",
	)
}



func bindataTemplateseditpagehtml() (*asset, error) {
	bytes, err := bindataTemplateseditpagehtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/editpage.html",
		size: 847,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547789035, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesheadhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4b\x8e\xdb\x30\x0c\xdd\x17\xe8\x1d\xd8\x14\xb3\x8b\x9c\x0f\x9a" +
	"\xa2\xf1\xc4\xb3\xea\x2d\x8a\x59\x30\x16\x1d\x0b\x95\x45\x43\x66\x7e\x0d\x72\xf7\x42\x8e\xe3\x91\xc7\x19\x14\x4d" +
	"\x36\x12\xc9\x47\x3e\x92\x4f\xde\x94\x84\xfa\xe5\xf3\x27\x00\x80\x4d\x45\x82\x90\x97\xe8\x1b\x92\x6c\xb2\x97\x42" +
	"\xfd\x98\x0c\x7c\x0e\x2b\xca\x26\x07\x43\xc7\x9a\xbd\x4c\x20\x67\x27\xe4\x24\x9b\x1c\x8d\x96\x32\xd3\x74\x30\x39" +
	"\xa9\xf6\x32\x05\xe3\x8c\x18\xb4\xaa\xc9\xd1\x52\xb6\x48\xe6\x8f\x72\xfd\xa4\x26\xf7\xa6\x16\xc3\x2e\x4a\x77\xb9" +
	"\x24\xd7\x6b\x08\xef\x00\x62\xc4\xd2\x4b\x6b\xdd\xcc\x6e\x97\xce\xd3\xc8\xb9\xbf\x6c\x59\x9f\xe1\x72\x3b\x87\x5f" +
	"\xc1\x4e\x54\x81\x95\xb1\xe7\x14\x1a\x74\x8d\x6a\xc8\x9b\xe2\xf9\x2d\xc2\x1a\x47\xaa\x24\xb3\x2b\x25\x85\x45\xb2" +
	"\xa2\x2a\x72\x56\x78\xba\xb5\x92\xc2\xb7\xe5\x3b\x8f\xdf\x19\x97\x02\xee\x85\x23\x73\x8d\x5a\x1b\xb7\x4b\x61\xd1" +
	"\x47\x5f\xef\x2d\x94\x8b\x29\x94\xcb\x11\xbb\x63\x57\xdb\xb1\xaf\xd0\x8e\x40\xcb\x29\x14\xec\xab\x18\xd6\x15\x51" +
	"\xc2\x75\x0a\xf3\x88\x72\x8f\xc2\x38\x5c\xe8\x24\x4a\x53\xce\x1e\xc3\x8c\x43\x25\x47\x6f\x08\x80\xdb\x31\x67\x4d" +
	"\x31\x6c\x8b\xf9\xef\x9d\xe7\xbd\xd3\x29\x7c\x25\xa2\xf7\x35\x6a\x4f\x8f\x48\x59\x2a\xc2\x20\x57\xf5\xe9\xf9\x83" +
	"\x5c\xc5\x2a\xfc\xe1\x8b\xa9\x82\x82\xd0\xc9\x3f\x32\xf3\x81\x7c\x61\xf9\xa8\x4e\x83\x71\xf7\xe1\xa1\x3f\xf4\x84" +
	"\x41\x6e\xf5\x5e\x7e\xc9\xb9\xa6\x2c\x18\x5f\x07\x16\x8d\x42\x62\x2a\x52\x96\x73\xb4\x43\x5f\x8d\x4d\x73\x64\xaf" +
	"\x5f\x47\xdb\x69\xcc\x1f\x8a\xb7\x39\x58\x72\x18\x3d\x2c\x9e\x46\xb2\x50\x5b\x16\xe1\x6a\xa8\xa7\xff\xe5\xfb\x90" +
	"\x53\x27\xc6\xf5\xfa\xe9\xa3\xac\x71\xf4\x5d\xd6\xdf\xe7\xf3\x7e\x1d\x3d\x20\x69\xf6\xdb\xf6\x1d\xc5\x88\x8e\x7f" +
	"\xab\x2c\x35\xec\x3a\x1a\xc7\x3c\x59\x8f\xdb\x4a\x7c\x28\x36\x12\x1e\x5a\xb3\x73\x29\xb4\xce\x11\x84\xbc\x67\x1f" +
	"\x43\x72\xb6\xec\x53\xf0\xa4\x63\x81\x02\x6c\x66\xf7\x57\xbe\x99\xb5\x9f\xab\xbf\x01\x00\x00\xff\xff\x06\xe3\xd7" +
	"\x5c\xb5\x04\x00\x00")

func bindataTemplatesheadhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesheadhtml,
		"templates/head.html",
	)
}



func bindataTemplatesheadhtml() (*asset, error) {
	bytes, err := bindataTemplatesheadhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/head.html",
		size: 1205,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547788966, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesunlockhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\x4b\x6e\xf3\x20\x10\xc7\xd7\x9f\x25\xee\x30\xdf\xec\x1b\x2e\x00" +
	"\x5e\x54\xea\xaa\x8b\x56\x4a\x7b\x80\x89\x99\x18\x14\x5e\xc2\x38\x55\x84\x72\xf7\x8a\xb8\xa9\xd2\x15\x12\xcc\xff" +
	"\xf1\x63\xd4\x7f\x93\xa6\x7a\xc9\x0c\xb6\x06\x3f\x8a\x41\xf5\x13\x3c\xc5\x59\x23\x47\x1c\xc5\xd0\x1a\x54\x0e\xd9" +
	"\x53\x65\x40\xcb\x64\x76\x7d\x04\x61\xf7\xec\xd3\xbc\xf7\xeb\x7c\xbd\x8a\x41\x1d\x92\xb9\x8c\x62\x10\x83\x32\xee" +
	"\x0c\x93\xa7\x65\xd1\x58\xdc\x6c\x6b\xf7\x00\x00\x50\x04\xb6\xf0\x51\xa3\x6c\xed\x41\x8b\xa3\x4d\x81\x95\xa4\x1e" +
	"\x2e\x8d\x3b\x6f\x2e\xc7\x54\x02\x04\xae\x36\x19\x8d\xef\x6f\xfb\x8f\x5f\x1b\x17\xf3\x5a\xa1\x77\xd6\x98\x69\x59" +
	"\xbe\x52\x31\x08\x91\x02\x6b\x3c\xf1\x05\x21\x7b\x9a\xd8\x26\x6f\xb8\x68\x7c\xed\x37\x86\x2a\x3d\xf9\xec\xe6\x98" +
	"\x0a\x6b\xac\x65\x65\x04\x79\x0b\xea\x96\xad\xb9\x23\xec\x5e\x4a\x49\xa5\xb3\xdc\x52\x1e\x28\xb8\x3f\xe0\xd8\xda" +
	"\x7d\xe4\x5e\x73\xd3\x72\x34\x5d\x25\x86\x7f\x7f\xaa\x2d\xeb\x21\xb8\x8a\x70\x26\xbf\xb2\xc6\xcf\xe8\xd3\x74\xda" +
	"\x52\x95\xec\x74\x1b\xa7\xfc\xf9\x38\x25\x6f\x0b\xf8\x0e\x00\x00\xff\xff\x2c\xa1\x2f\xe4\x90\x01\x00\x00")

func bindataTemplatesunlockhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesunlockhtml,
		"templates/unlock.html",
	)
}



func bindataTemplatesunlockhtml() (*asset, error) {
	bytes, err := bindataTemplatesunlockhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/unlock.html",
		size: 400,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547789049, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesviewbloghtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4d\x6b\xc3\x30\x0c\xbd\x07\xf2\x1f\x34\xd3\xe3\x48\x68\x8f\xc3" +
	"\xf1\x61\x8c\xb1\xe3\x60\xdb\x0f\x70\x2b\x35\x0e\x73\x9c\x90\xb8\x63\x45\xcb\x7f\x1f\x8a\xfb\xc9\x60\xf4\x22\x83" +
	"\xa4\xf7\xf4\x64\x3d\x7d\x87\xdd\x26\xee\x7b\x02\x17\x5b\x6f\xf2\x4c\xcb\x0b\xde\x86\xba\x52\x14\x94\xc9\x33\x66" +
	"\x88\xd4\xf6\xde\x46\x02\xe5\xc8\x62\x21\x2d\x0a\x8a\x47\xdf\xd5\xc5\x7b\x13\x3d\x4d\x53\x9e\xe9\x75\x87\x7b\x93" +
	"\x67\x42\xb1\x34\xcc\x57\x65\x5d\xba\x65\xaa\x61\xf3\x75\x2a\xbe\xc4\xd6\x4b\x4d\x72\x09\x38\x9c\x9a\x60\xe3\xed" +
	"\x38\x56\x6a\x68\x6a\x17\x45\x06\x00\x00\x73\xb3\x85\xe2\x23\xf8\x6e\xf3\x49\x28\x53\x25\xab\x2d\xb8\x81\xb6\x95" +
	"\x2a\x8f\xc4\x12\xde\xfc\xae\x9e\xa6\xd2\x22\x2a\x63\x11\x75\x69\x0f\x24\x3f\xff\x03\x08\x9b\xa8\x8c\xc4\x9b\x21" +
	"\x22\x47\x19\x89\x67\x08\x33\xf9\x91\x6e\x92\xb8\x0b\x89\x20\xbd\x57\x14\x61\x5e\xf2\xfc\x43\xcc\x30\xd8\x50\x13" +
	"\x2c\x9a\x80\xf4\x7d\x0f\x8b\xde\xd6\x04\x0f\x15\x14\xaf\xb6\xa6\x11\x4e\x03\xdd\xca\x5c\x0e\x5d\xfc\x99\xca\x3c" +
	"\x63\x67\x5c\x4a\x29\xc3\x9c\x08\xd3\xd9\x40\x6e\x63\x8d\x2e\xdd\xea\xa0\x48\xf7\xc7\xb3\x8c\xbb\x75\x94\x9e\x0b" +
	"\xcc\x73\x37\xb4\x36\x46\xc2\x27\x71\x8a\x60\xfb\xe4\x1e\x0a\x38\xeb\x92\x45\x0e\x26\xd1\xe5\x6c\xb7\xdf\x00\x00" +
	"\x00\xff\xff\x82\x54\x25\x37\x7e\x02\x00\x00")

func bindataTemplatesviewbloghtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesviewbloghtml,
		"templates/viewblog.html",
	)
}



func bindataTemplatesviewbloghtml() (*asset, error) {
	bytes, err := bindataTemplatesviewbloghtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/viewblog.html",
		size: 638,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547788953, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesviewpagehtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x4d\x4e\xc4\x30\x0c\x85\xf7\x95\x7a\x07\x93\x03\x34\x9a\x7d\x9a" +
	"\x05\x42\x88\x25\x12\x70\x00\xd3\x78\x92\x88\xfc\x54\xad\x19\x69\x14\x7a\x77\xe4\xce\x94\x1d\x9b\x44\xf6\x7b\xfe" +
	"\x64\x3f\xf3\xe0\xea\xc4\xd7\x99\x20\x70\x4e\xb6\xef\x8c\xfc\x90\xb0\xf8\x51\x51\x51\xb6\xef\x5a\x03\xa6\x3c\x27" +
	"\x64\x02\x15\x08\xdd\x20\x16\x05\xc3\x7b\xe4\x44\xdb\xd6\x77\xe6\xb3\xba\xab\xed\xbb\xbe\x33\x2e\x5e\x60\x4a\xb8" +
	"\xae\xa3\x5a\xa2\x0f\x2c\x00\x00\x00\x83\x10\x16\x3a\x8f\x4a\xb7\x36\x3c\xa6\xea\xdf\xd2\xb7\xdf\x36\x65\x43\xcd" +
	"\x64\x34\x5a\xb8\xf9\x5a\x8b\x67\x18\x3e\x4a\xaa\xd3\x17\x39\x81\x4b\xf7\xe7\xbf\x79\xa9\x5e\xd1\xd3\xbd\x22\x17" +
	"\x59\x59\x79\x05\x79\x10\xa9\xec\x20\xa3\x5d\xbc\xdc\xb6\x0c\x27\xdb\xda\xb1\xbf\xd1\xe1\x24\x87\xaf\x33\x16\x69" +
	"\x3f\xd7\x25\x23\x33\xb9\x27\xe4\x5d\xde\x85\xe3\x3a\x71\xbc\x70\x4e\x22\xfc\xf1\xf4\x3d\x00\xa3\xf7\x14\x7f\x03" +
	"\x00\x00\xff\xff\xbe\xa2\xad\x0a\x55\x01\x00\x00")

func bindataTemplatesviewpagehtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesviewpagehtml,
		"templates/viewpage.html",
	)
}



func bindataTemplatesviewpagehtml() (*asset, error) {
	bytes, err := bindataTemplatesviewpagehtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/viewpage.html",
		size: 341,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1547789060, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"templates/deletepage.html": bindataTemplatesdeletepagehtml,
	"templates/editblog.html":   bindataTemplateseditbloghtml,
	"templates/editpage.html":   bindataTemplateseditpagehtml,
	"templates/head.html":       bindataTemplatesheadhtml,
	"templates/unlock.html":     bindataTemplatesunlockhtml,
	"templates/viewblog.html":   bindataTemplatesviewbloghtml,
	"templates/viewpage.html":   bindataTemplatesviewpagehtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"templates": {Func: nil, Children: map[string]*bintree{
		"deletepage.html": {Func: bindataTemplatesdeletepagehtml, Children: map[string]*bintree{}},
		"editblog.html": {Func: bindataTemplateseditbloghtml, Children: map[string]*bintree{}},
		"editpage.html": {Func: bindataTemplateseditpagehtml, Children: map[string]*bintree{}},
		"head.html": {Func: bindataTemplatesheadhtml, Children: map[string]*bintree{}},
		"unlock.html": {Func: bindataTemplatesunlockhtml, Children: map[string]*bintree{}},
		"viewblog.html": {Func: bindataTemplatesviewbloghtml, Children: map[string]*bintree{}},
		"viewpage.html": {Func: bindataTemplatesviewpagehtml, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
